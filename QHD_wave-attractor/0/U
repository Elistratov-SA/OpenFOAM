/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    top
    {
        type            fixedValue;
        value           uniform (0 0 0);//*/

     /*  type  codedFixedValue;
       name  increaseToFixedValue;
       code
       #{
                const vectorField& Cf = patch().Cf();
                vectorField& field    = *this;

                const scalar a0 = 0.00001;
                const scalar w0 = 0.628;
                const scalar L  = 0.6;
                const scalar pi = constant::mathematical::pi;
	
                forAll(Cf, faceI)
                {
                      const scalar x = Cf[faceI][0];
                      const scalar t = this->db().time().value();
                      field[faceI]   = vector(0,a0*w0*sin(2*pi*x/L)*sin(w0*t),0);
		}

        #};//*/
    }

    down
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    left
    {
       /* type            fixedValue;
        value           uniform (0 0 0);//*/

	type  codedFixedValue;
	name  increaseToFixedValue;
	code
	   #{
               const vectorField& Cf = patch().Cf();
               vectorField& field    = *this;
               const scalar a0 = 0.01* 0.001;
               const scalar w0 = 0.628;
               const scalar H  = 0.4;
               const scalar pi = constant::mathematical::pi;
									             
               forAll(Cf, faceI)
               {
                   const scalar y = Cf[faceI][1];
                   const scalar t = this->db().time().value();
                   field[faceI]   = vector(a0*w0*sin(2*pi*y/H)*sin(w0*t),0,0);
               }
         #};//*/


    }

    right
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
